// two pass
void sortColors(vector<int>& nums) {
        int one = 0 ;
        int two = 0 ;
        int zero = 0 ;
        // loop to count occurance of 0s 1s and 2s
        for(int i = 0 ; i < nums.size() ; i++){
            if(nums[i] == 0){
                zero++;
            }
            if(nums[i] == 1){
                one++;
            }
            if(nums[i] == 2){
                two++;
            }
        }
        // loop to fill them according to their occurence
        for(int  i = 0 ; i < nums.size() ; i++){
            if(i<zero){
                nums[i] = 0;
            } else if(i >= zero && i <one + zero){
                nums[i] = 1;
            } else {
                nums[i] = 2;
            }
        }
    }

// Time complexity : O(n)
// Space Complexity : O(1)
----------------------------------------------------------------------------------------
// One Pass Two pointer method

   void sortColors(vector<int>& nums) {
        int low = 0 ;
        int mid = 0 ;
        int high = nums.size() - 1 ;
        while(mid <= high){
          
            if(nums[mid] == 0){
                 int temp;
               temp = nums[mid];
                nums[mid] = nums[low];
                nums[low] = temp;
                mid++; //since the number of zero has increased
                low++; // since we swapped zero to low index
                
            } else if(nums[mid] == 2){
                 int temp;
               temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--; //since 2 is from the last so going backward
            } else{
                mid++; // since encountered one
           }
        }
       
  }

// Time complexity : O(n)
// Space Complexity : O(1)
--------------------------------------------------------------------------------------
// One pass Two pointer using swap

void sortColors(vector<int>& nums) {
        int low = 0;
        int mid = 0;
        int high = nums.size() - 1;
        
        while(mid <= high){
            if(nums[mid] == 0){
                std::swap(nums[mid], nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid] == 2){
                std::swap(nums[mid], nums[high]);
                high--;
            }
            else
                mid++;
        }
    }

// Time complexity : O(n)
// Space Complexity : O(1)
